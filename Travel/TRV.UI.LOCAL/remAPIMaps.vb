Imports System.Text
Imports TRV.Entidades

Module remAPIMaps

    Const source = "C:\TRAVEL\Api.Maps\services"


    Function apiMaps_getCoordinates_OnClick(ByVal centralStation As Estacion) As String

        Dim _lat As String = centralStation.Latitud
        Dim _lng As String = centralStation.Longitud
        _lat = Replace(_lat, ",", ".")
        _lng = Replace(_lng, ",", ".")

        Const fic As String = source & "\getCoordinates.html"

        Dim sw As New System.IO.StreamWriter(fic, False, System.Text.Encoding.GetEncoding(437))

        sw.WriteLine("<html xmlns=" + Chr(34) + "http://www.w3.org/1999/xhtml" + Chr(34) + ">")
        sw.WriteLine("  <head>")
        sw.WriteLine("      <meta charset=" + Chr(34) + "utf-8" + Chr(34) + ">")
        sw.WriteLine("      <meta http-equiv=" + Chr(34) + "X-UA-Compatible" + Chr(34) + " content=" + Chr(34) + "IE=9; IE=8; IE=7; IE=EDGE" + Chr(34) + " />")
        sw.WriteLine("      <meta name=" + Chr(34) + "" + Chr(34) + "content=" + Chr(34) + "initial-scale=1.0, user - scalable = no" + Chr(34) + " />")
        sw.WriteLine("      <title>Get Coordinates</title>")
        sw.WriteLine("      <style>")
        sw.WriteLine("          html, body {")
        sw.WriteLine("              height: 100%;")
        sw.WriteLine("              margin: 0;")
        sw.WriteLine("              padding: 0;")
        sw.WriteLine("          }")
        sw.WriteLine("          #floating-panel {")
        sw.WriteLine("              position: absolute;")
        sw.WriteLine("              top: 10px;")
        sw.WriteLine("              left: 25%;")
        sw.WriteLine("              z-index: 5;")
        sw.WriteLine("              background-color: #fff;")
        sw.WriteLine("              padding: 5px;")
        sw.WriteLine("              border: 1px solid #999;")
        sw.WriteLine("              text-align: center;")
        sw.WriteLine("              font-family: 'Roboto','sans-serif';")
        sw.WriteLine("              line-height: 30px;")
        sw.WriteLine("              padding-left: 10px;")
        sw.WriteLine("          }")
        sw.WriteLine("          #place{")
        sw.WriteLine("              width: 350px;")
        sw.WriteLine("              display: block;")
        sw.WriteLine("          }")
        sw.WriteLine("      </style>")
        sw.WriteLine("  </head>")
        sw.WriteLine("  <body>")
        sw.WriteLine("  <script type=" + Chr(34) + "text/javascript" + Chr(34) + "src=" + Chr(34) + "http://maps.googleapis.com/maps/api/js?key=AIzaSyBQH8EtKz31vR8yEvK9vLBbJsCJaYMVcCs" + Chr(34) + " ></script>")
        sw.WriteLine("  <script type=" + Chr(34) + "text/javascript" + Chr(34) + ">")
        sw.WriteLine("      var geocoder = new google.maps.Geocoder();")
        sw.WriteLine("      var place = new google.maps.LatLng(" + _lat + ", " + _lng + ");")
        sw.WriteLine("      var markers = [];")
        sw.WriteLine("      var map;")
        sw.WriteLine("      window.onload = function () {")
        sw.WriteLine("          var mapOptions = {")
        sw.WriteLine("              center: place,")
        sw.WriteLine("              zoom: 12,")
        sw.WriteLine("              mapTypeId: google.maps.MapTypeId.ROADMAP")
        sw.WriteLine("          };")
        sw.WriteLine("          map = new google.maps.Map(document.getElementById(" + Chr(34) + "dvMap" + Chr(34) + "), mapOptions);")
        sw.WriteLine("          google.maps.event.addListener(map, 'click', function (e) {")
        sw.WriteLine("               document.getElementById(" + Chr(34) + "latitud" + Chr(34) + ").value = e.latLng.lat();")
        sw.WriteLine("               document.getElementById(" + Chr(34) + "longitud" + Chr(34) + ").value = e.latLng.lng();")
        sw.WriteLine("              geocodePosition(e.latLng);")
        sw.WriteLine("              addMarker(e.latLng);")
        sw.WriteLine("          });")
        sw.WriteLine("      }")
        sw.WriteLine("      function geocodePosition(pos) {")
        sw.WriteLine("          geocoder.geocode({")
        sw.WriteLine("              latLng: pos")
        sw.WriteLine("          }, function(responses) {")
        sw.WriteLine("              if (responses && responses.length > 0) {")
        sw.WriteLine("                  document.getElementById(" + Chr(34) + "place" + Chr(34) + ").value = responses[0].formatted_address;")
        sw.WriteLine("              } else {")
        sw.WriteLine("                  document.getElementById(" + Chr(34) + "place" + Chr(34) + ").value = " + Chr(34) + "The name of the location is not identified" + Chr(34) + ";")
        sw.WriteLine("              }")
        sw.WriteLine("          });")
        sw.WriteLine("      }")
        sw.WriteLine("      function placeMarker(location) {")
        sw.WriteLine("          var marker = new google.maps.Marker({")
        sw.WriteLine("              position: location, ")
        sw.WriteLine("              map: map")
        sw.WriteLine("          });")
        sw.WriteLine("      }")
        sw.WriteLine("      function addMarker(location) {")
        sw.WriteLine("          deleteMarkers();")
        sw.WriteLine("          var marker = new google.maps.Marker({")
        sw.WriteLine("              position: location,")
        sw.WriteLine("              map: map")
        sw.WriteLine("          });")
        sw.WriteLine("          markers.push(marker);")
        sw.WriteLine("      }")
        sw.WriteLine("      function deleteMarkers() {")
        sw.WriteLine("          clearMarkers();")
        sw.WriteLine("          markers = [];")
        sw.WriteLine("      }")
        sw.WriteLine("      function clearMarkers() {")
        sw.WriteLine("          setMapOnAll(null);")
        sw.WriteLine("      }")
        sw.WriteLine("      function setMapOnAll(map) {")
        sw.WriteLine("          for (var i = 0; i < markers.length; i++) {")
        sw.WriteLine("              markers[i].setMap(map);")
        sw.WriteLine("          }")
        sw.WriteLine("      }")
        sw.WriteLine("  </script>")
        sw.WriteLine("  <div id=" + Chr(34) + "dvMap" + Chr(34) + " style=" + Chr(34) + "width:  100%; height: 100%" + Chr(34) + " > </div>")
        sw.WriteLine("  <div id=" + Chr(34) + "floating-panel" + Chr(34) + ">")
        sw.WriteLine("      <input type=" + Chr(34) + "text" + Chr(34) + " id=" + Chr(34) + "place" + Chr(34) + " value=" + Chr(34) + "Place:   " + Chr(34) + " > ")
        sw.WriteLine("      <input type=" + Chr(34) + "text" + Chr(34) + " id=" + Chr(34) + "latitud" + Chr(34) + " value=" + Chr(34) + "Lat:      " + Chr(34) + ">")
        sw.WriteLine("      <input type=" + Chr(34) + "text" + Chr(34) + " id=" + Chr(34) + "longitud" + Chr(34) + " value=" + Chr(34) + "Lng:    " + Chr(34) + ">")
        sw.WriteLine("  </div>")
        sw.WriteLine(" </body>")
        sw.WriteLine("</html>")

        sw.Close()

        Return source & "\getCoordinates.html"

    End Function
    Function apiMaps_Lines_Stations(ByVal estacionesData As String, ByVal lineData As List(Of String), ByVal centralStation As Estacion, ByVal bool As Boolean) As String

        Const fic As String = source & "\Lines_Stations.html"

        Dim lat As String = centralStation.Latitud
        Dim lng As String = centralStation.Longitud
        lat = Replace(lat, ",", ".")
        lng = Replace(lng, ",", ".")

        Dim sw As New System.IO.StreamWriter(fic, False, System.Text.Encoding.GetEncoding(437))

        sw.WriteLine("<!DOCTYPE html>")
        sw.WriteLine("<html>")
        sw.WriteLine("  <head>")
        sw.WriteLine("      <meta charset=" + Chr(34) + "utf-8" + Chr(34) + ">")
        sw.WriteLine("      <meta http-equiv=" + Chr(34) + "X-UA-Compatible" + Chr(34) + " content=" + Chr(34) + "IE=9; IE=8; IE=7; IE=EDGE" + Chr(34) + " />")
        sw.WriteLine("      <meta name=" + Chr(34) + "" + Chr(34) + "content=" + Chr(34) + "initial-scale=1.0, user-scalable=no" + Chr(34) + " />")
        sw.WriteLine("      <title>API Maps</title>")
        sw.WriteLine("      <script async defer")
        sw.WriteLine("          src=" + Chr(34) + "https://maps.googleapis.com/maps/api/js?key=AIzaSyBQH8EtKz31vR8yEvK9vLBbJsCJaYMVcCs&signed_in=true&callback=initMap" + Chr(34) + " ></script>")
        sw.WriteLine("  <style>")
        sw.WriteLine("      html, body {")
        sw.WriteLine("          height: 100%;")
        sw.WriteLine("          margin: 0;")
        sw.WriteLine("          padding: 0;")
        sw.WriteLine("      }")
        sw.WriteLine("      #map {")
        sw.WriteLine("        height: 100%;")
        sw.WriteLine("      }")
        sw.WriteLine("/*      #floating-panel {")
        sw.WriteLine("          position: absolute;")
        sw.WriteLine("          top: 10px;")
        sw.WriteLine("          left: 25%;")
        sw.WriteLine("          z-index: 5;")
        sw.WriteLine("          background-color: #fff;")
        sw.WriteLine("          padding: 5px;")
        sw.WriteLine("          border: 1px solid #999;")
        sw.WriteLine("          text-align: center;")
        sw.WriteLine("          font-family: 'Roboto', 'sans-serif';")
        sw.WriteLine("          line-height: 30px;")
        sw.WriteLine("          padding-left: 10px;")
        sw.WriteLine("      } */")
        sw.WriteLine("  </style>")
        sw.WriteLine("         ")
        sw.WriteLine("  </head>")
        sw.WriteLine("  <body>")
        sw.WriteLine("  <!-- <div id=" + Chr(34) + "floating-panel" + Chr(34) + ">")
        sw.WriteLine("          <button id=" + Chr(34) + "showLine" + Chr(34) + " onclick=" + Chr(34) + "showLines()" + Chr(34) + "> show Lines </button>")
        sw.WriteLine("          <button id=" + Chr(34) + "cleanStations" + Chr(34) + " onclick=" + Chr(34) + "clearMarkers()" + Chr(34) + "> Limpiar </button>")
        sw.WriteLine("     <select name=" + Chr(34) + "travel_lines" + Chr(34) + " onchange=" + Chr(34) + "showOneLine();" + Chr(34) + " id=" + Chr(34) + "travel_lines" + Chr(34) + ">")
        sw.WriteLine("          <option value=" + Chr(34) + "0" + Chr(34) + ">Tren 1</option>")
        sw.WriteLine("          <option value=" + Chr(34) + "1" + Chr(34) + ">Tren 2</option>")
        sw.WriteLine("      </select>")
        sw.WriteLine("  </div> -->")
        sw.WriteLine("  <div id=" + Chr(34) + "map" + Chr(34) + "> </div>")
        sw.WriteLine("  <script>")
        sw.WriteLine("      var markers = [];")
        sw.WriteLine("      var trainTravel;")
        sw.WriteLine("      var map;")
        sw.WriteLine("      var stations = " + estacionesData + ";")
        sw.WriteLine("      ")
        sw.WriteLine("      var allTravels = [")
        sw.WriteLine("          travelTrain1 = [ " + Chr(34) + lineData(0) + Chr(34) + ", " + lineData(1) + ", " + lineData(2) + " ]")
        sw.WriteLine("      ];")
        sw.WriteLine("      ")
        sw.WriteLine("      function initMap() {")
        sw.WriteLine("          map = new google.maps.Map(document.getElementById('map'), {")
        sw.WriteLine("              zoom: 9,")
        sw.WriteLine("              center: {lat: " + lat + ", lng: " + lng + "},")
        sw.WriteLine("              mapTypeId: google.maps.MapTypeId.ROADMAP")
        sw.WriteLine("          });")
        If bool Then
            sw.WriteLine("          showLines();")
        End If
        sw.WriteLine("          drop();")
        sw.WriteLine("      }")
        sw.WriteLine("      function drawMap( path, color, timeTravel ) {")
        sw.WriteLine("          var lineSymbol = {")
        sw.WriteLine("              path: google.maps.SymbolPath.CIRCLE,")
        sw.WriteLine("              scale: 8,")
        sw.WriteLine("              strokeColor: color")
        sw.WriteLine("          };")
        sw.WriteLine("      trainTravel = new google.maps.Polyline({")
        sw.WriteLine("          path: path,")
        sw.WriteLine("          icons: [{")
        sw.WriteLine("                  icon: lineSymbol,")
        sw.WriteLine("                  offset: '100%'")
        sw.WriteLine("                  }],")
        sw.WriteLine("          geodesic: true,")
        sw.WriteLine("          map: map,")
        sw.WriteLine("          strokeColor: color")
        sw.WriteLine("      });")
        sw.WriteLine("      ")
        sw.WriteLine("          animateCircle(trainTravel, path, color, timeTravel );")
        sw.WriteLine("      }")
        sw.WriteLine("      function animateCircle( line, path, color, timeTravel) {")
        sw.WriteLine("          var count = 0;")
        sw.WriteLine("          var travelReverse = [];")
        sw.WriteLine("          var travel = window.setInterval(function() {")
        sw.WriteLine("              count = (count + 1) % 200;")
        sw.WriteLine("              var icons = line.get('icons');")
        sw.WriteLine("              icons[0].offset = (count / 2) + '%';")
        sw.WriteLine("              line.set('icons', icons);")
        sw.WriteLine("      ")
        sw.WriteLine("              if ( ( icons[0].offset ) == " + Chr(34) + "99.5%" + Chr(34) + ") {")
        sw.WriteLine("                  window.clearInterval( travel );")
        sw.WriteLine("                  ")
        sw.WriteLine("                  for(var i = path.length-1; i >= 0; i--) {")
        sw.WriteLine("                      travelReverse.push( path[i] );")
        sw.WriteLine("                  }")
        sw.WriteLine("                  ")
        sw.WriteLine("                  drawMap( travelReverse, color, timeTravel );")
        sw.WriteLine("              }")
        sw.WriteLine("           }, timeTravel);")
        sw.WriteLine("      }")
        sw.WriteLine("      ")
        sw.WriteLine("      function showOneLine(timeTravel, select) {")
        sw.WriteLine("          var select = document.getElementById( " + Chr(34) + "travel_lines" + Chr(34) + " ).value;")
        sw.WriteLine("          var timeTravel  = allTravels[select][2];")
        sw.WriteLine("          var path =  allTravels[select][1];")
        sw.WriteLine("          var color = allTravels[select][0];")
        sw.WriteLine("      ")
        sw.WriteLine("          drawMap( path, color, timeTravel);")
        sw.WriteLine("      ")
        sw.WriteLine("          for (var i = 0; i < path.length; i++) {")
        sw.WriteLine("              addMarkerWithTimeout( path[i],  i * 500 , " + Chr(34) + Chr(34) + " );")
        sw.WriteLine("          }")
        sw.WriteLine("      }")
        sw.WriteLine("      ")
        sw.WriteLine("      var color = null;")
        sw.WriteLine("      var path      = null;")
        sw.WriteLine("      var timeTravel = null;")
        sw.WriteLine("      ")
        sw.WriteLine("      function showLines() {")
        sw.WriteLine("          for (var i = 0; i < allTravels.length; i++) {")
        sw.WriteLine("              color      = allTravels[i][0];")
        sw.WriteLine("              path       = allTravels[i][1];")
        sw.WriteLine("              timeTravel = allTravels[i][2]")
        sw.WriteLine("      ")
        sw.WriteLine("              drawMap( path, color, timeTravel );")
        sw.WriteLine("          }")
        sw.WriteLine("      }")
        sw.WriteLine("      ")
        sw.WriteLine("      ")
        sw.WriteLine("      function drop() {")
        sw.WriteLine("          clearMarkers();")
        sw.WriteLine("          for (var i = 0; i < stations.length; i++) {")
        sw.WriteLine("              addMarkerWithTimeout(stations[i][0], i * 500 , stations[i][1] );")
        sw.WriteLine("          }")
        sw.WriteLine("      }")
        sw.WriteLine("      ")
        sw.WriteLine("      function addMarkerWithTimeout(position, timeout, place ) {")
        sw.WriteLine("          var image = 'station.png';")
        sw.WriteLine("      ")
        sw.WriteLine("          window.setTimeout(function() {  ")
        sw.WriteLine("              markers.push(new google.maps.Marker({")
        sw.WriteLine("                  position: position,")
        sw.WriteLine("                  map: map,")
        sw.WriteLine("//                  icon: image,")
        sw.WriteLine("                  animation: google.maps.Animation.DROP,")
        sw.WriteLine("                  title: place")
        sw.WriteLine("              }));")
        sw.WriteLine("          }, timeout);")
        sw.WriteLine("      }")
        sw.WriteLine("      ")
        sw.WriteLine("      function clearMarkers() {")
        sw.WriteLine("          for (var i = 0; i < markers.length; i++) {")
        sw.WriteLine("              markers[i].setMap(null);")
        sw.WriteLine("          }")
        sw.WriteLine("      }")
        sw.WriteLine("      </script>")
        sw.WriteLine("  </body>")
        sw.WriteLine("</html>")

        sw.Close()

        Return source & "\Lines_Stations.html"

    End Function

    Function apiMaps_AnimateMarker(ByVal lat As String, ByVal lng As String) As String

        Const fic As String = source & "\AnimateMarkers.html"

        Dim sw As New System.IO.StreamWriter(fic, False, System.Text.Encoding.GetEncoding(437))

        sw.WriteLine("<!DOCTYPE html>")
        sw.WriteLine("<html>")
        sw.WriteLine("  <head>")
        sw.WriteLine("      <meta charset=" + Chr(34) + "utf-8" + Chr(34) + ">")
        sw.WriteLine("      <meta http-equiv=" + Chr(34) + "X-UA-Compatible" + Chr(34) + " content=" + Chr(34) + "IE=9; IE=8; IE=7; IE=EDGE" + Chr(34) + " />")
        sw.WriteLine("      <meta name=" + Chr(34) + "" + Chr(34) + "content=" + Chr(34) + "initial-scale=1.0, user-scalable=no" + Chr(34) + " />")
        sw.WriteLine("      <title>Marker Animations</title>")
        sw.WriteLine("      <style>")
        sw.WriteLine("          html, body {")
        sw.WriteLine("          height: 100%;")
        sw.WriteLine("          margin: 0;")
        sw.WriteLine("          padding: 0;")
        sw.WriteLine("      }")
        sw.WriteLine("      #map {")
        sw.WriteLine("          height: 100%;")
        sw.WriteLine("      }")
        sw.WriteLine("      </style>")
        sw.WriteLine("  </head>")
        sw.WriteLine("  <body>")
        sw.WriteLine("      <div id=" + Chr(34) + "map" + Chr(34) + "></div>")
        sw.WriteLine("  <script>")
        sw.WriteLine("      var marker;")
        sw.WriteLine("      function initMap() {")
        sw.WriteLine("          var map = new google.maps.Map(document.getElementById('map'), {")
        sw.WriteLine("              zoom: 18,")
        sw.WriteLine("              center: {lat: " + lat + ", lng: " + lng + "},")
        sw.WriteLine("              mapTypeId: google.maps.MapTypeId.ROADMAP")
        sw.WriteLine("          });")
        sw.WriteLine("          marker = new google.maps.Marker({")
        sw.WriteLine("              map: map,")
        sw.WriteLine("              draggable: true,")
        sw.WriteLine("              animation: google.maps.Animation.DROP,")
        sw.WriteLine("              position: {lat: " + lat + ", lng: " + lng + "},")
        sw.WriteLine("              title: 'Estacion Central'")
        sw.WriteLine("          });")
        sw.WriteLine("          marker.addListener('click', toggleBounce);")
        sw.WriteLine("      }")
        sw.WriteLine("      function toggleBounce() {")
        sw.WriteLine("          if( marker.getAnimation() !== null) {")
        sw.WriteLine("              marker.setAnimation(null);")
        sw.WriteLine("          } else {")
        sw.WriteLine("              marker.setAnimation(google.maps.Animation.BOUNCE);")
        sw.WriteLine("          }")
        sw.WriteLine("      }")
        sw.WriteLine("  </script>")
        sw.WriteLine("  <script async defer")
        sw.WriteLine("      src=" + Chr(34) + "https://maps.googleapis.com/maps/api/js?key=AIzaSyBQH8EtKz31vR8yEvK9vLBbJsCJaYMVcCs&signed_in=true&callback=initMap" + Chr(34) + " ></script>")
        sw.WriteLine("</body>")
        sw.WriteLine("</html>")

        sw.Close()

        Return source & "\AnimateMarkers.html"

    End Function

    Function recreateOurPage() As String

        Const fic As String = source & "\page.html"

        Dim sw As New System.IO.StreamWriter(fic, False, System.Text.Encoding.GetEncoding(437))

        sw.WriteLine("<!DOCTYPE html>")
        sw.WriteLine("<html lang=" + Chr(34) + "en" + Chr(34) + ">")
        sw.WriteLine(" <head>")
        sw.WriteLine("     <meta charset=" + Chr(34) + "UTF-8" + Chr(34) + ">")
        sw.WriteLine("     <title>Page</title>")
        sw.WriteLine("     <style>")
        sw.WriteLine("         html, body {")
        sw.WriteLine("             position: fixed;")
        sw.WriteLine("             top: 0;")
        sw.WriteLine("             bottom: 0;")
        sw.WriteLine("             left: 0;")
        sw.WriteLine("             right: 0;")
        sw.WriteLine("             max-width: 100%;")
        sw.WriteLine("             max-height: 100%;")
        sw.WriteLine("             margin: auto;")
        sw.WriteLine("             overflow: auto;")
        sw.WriteLine("         }")
        sw.WriteLine("         img {")
        sw.WriteLine("             width: 97%;")
        sw.WriteLine("             height: 322px;")
        sw.WriteLine("         }")
        sw.WriteLine("     </style>")
        sw.WriteLine(" </head")
        sw.WriteLine(" <body>")
        sw.WriteLine("<img src=" + Chr(34) + "logo.jpg" + Chr(34) + " />")
        sw.WriteLine(" </body")
        sw.WriteLine("</html>")

        sw.Close()

        Return source & "\page.html"

    End Function
End Module